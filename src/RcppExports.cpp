// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// shc_MDSeparation
double shc_MDSeparation(NumericVector mean1, NumericMatrix covariance1, NumericVector virtualVariance1, int N1, bool isInversion1, double th1, NumericVector mean2, NumericMatrix covariance2, NumericVector virtualVariance2, int N2, bool isInversion2, double th2);
RcppExport SEXP _SHClus_shc_MDSeparation(SEXP mean1SEXP, SEXP covariance1SEXP, SEXP virtualVariance1SEXP, SEXP N1SEXP, SEXP isInversion1SEXP, SEXP th1SEXP, SEXP mean2SEXP, SEXP covariance2SEXP, SEXP virtualVariance2SEXP, SEXP N2SEXP, SEXP isInversion2SEXP, SEXP th2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mean1(mean1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance1(covariance1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type virtualVariance1(virtualVariance1SEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< bool >::type isInversion1(isInversion1SEXP);
    Rcpp::traits::input_parameter< double >::type th1(th1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean2(mean2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance2(covariance2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type virtualVariance2(virtualVariance2SEXP);
    Rcpp::traits::input_parameter< int >::type N2(N2SEXP);
    Rcpp::traits::input_parameter< bool >::type isInversion2(isInversion2SEXP);
    Rcpp::traits::input_parameter< double >::type th2(th2SEXP);
    rcpp_result_gen = Rcpp::wrap(shc_MDSeparation(mean1, covariance1, virtualVariance1, N1, isInversion1, th1, mean2, covariance2, virtualVariance2, N2, isInversion2, th2));
    return rcpp_result_gen;
END_RCPP
}
// shc_MutualMinMahalanobis
double shc_MutualMinMahalanobis(NumericVector mean1, NumericMatrix covariance1, NumericVector virtualVariance1, int N1, bool isInversion1, NumericVector mean2, NumericMatrix covariance2, NumericVector virtualVariance2, int N2, bool isInversion2);
RcppExport SEXP _SHClus_shc_MutualMinMahalanobis(SEXP mean1SEXP, SEXP covariance1SEXP, SEXP virtualVariance1SEXP, SEXP N1SEXP, SEXP isInversion1SEXP, SEXP mean2SEXP, SEXP covariance2SEXP, SEXP virtualVariance2SEXP, SEXP N2SEXP, SEXP isInversion2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mean1(mean1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance1(covariance1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type virtualVariance1(virtualVariance1SEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< bool >::type isInversion1(isInversion1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean2(mean2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance2(covariance2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type virtualVariance2(virtualVariance2SEXP);
    Rcpp::traits::input_parameter< int >::type N2(N2SEXP);
    Rcpp::traits::input_parameter< bool >::type isInversion2(isInversion2SEXP);
    rcpp_result_gen = Rcpp::wrap(shc_MutualMinMahalanobis(mean1, covariance1, virtualVariance1, N1, isInversion1, mean2, covariance2, virtualVariance2, N2, isInversion2));
    return rcpp_result_gen;
END_RCPP
}
// shc_CalculateNewMean
NumericVector shc_CalculateNewMean(NumericVector mean, NumericVector newElement, int N);
RcppExport SEXP _SHClus_shc_CalculateNewMean(SEXP meanSEXP, SEXP newElementSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type newElement(newElementSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(shc_CalculateNewMean(mean, newElement, N));
    return rcpp_result_gen;
END_RCPP
}
// shc_CalculateCovariance
NumericMatrix shc_CalculateCovariance(NumericVector oldMean, NumericVector newMean, NumericMatrix oldCovariance, int N, NumericVector newElement, bool isInversion);
RcppExport SEXP _SHClus_shc_CalculateCovariance(SEXP oldMeanSEXP, SEXP newMeanSEXP, SEXP oldCovarianceSEXP, SEXP NSEXP, SEXP newElementSEXP, SEXP isInversionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type oldMean(oldMeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type newMean(newMeanSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type oldCovariance(oldCovarianceSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type newElement(newElementSEXP);
    Rcpp::traits::input_parameter< bool >::type isInversion(isInversionSEXP);
    rcpp_result_gen = Rcpp::wrap(shc_CalculateCovariance(oldMean, newMean, oldCovariance, N, newElement, isInversion));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_SHCModule();
RcppExport SEXP _rcpp_module_boot_SigmaIndexModule();

static const R_CallMethodDef CallEntries[] = {
    {"_SHClus_shc_MDSeparation", (DL_FUNC) &_SHClus_shc_MDSeparation, 12},
    {"_SHClus_shc_MutualMinMahalanobis", (DL_FUNC) &_SHClus_shc_MutualMinMahalanobis, 10},
    {"_SHClus_shc_CalculateNewMean", (DL_FUNC) &_SHClus_shc_CalculateNewMean, 3},
    {"_SHClus_shc_CalculateCovariance", (DL_FUNC) &_SHClus_shc_CalculateCovariance, 6},
    {"_rcpp_module_boot_SHCModule", (DL_FUNC) &_rcpp_module_boot_SHCModule, 0},
    {"_rcpp_module_boot_SigmaIndexModule", (DL_FUNC) &_rcpp_module_boot_SigmaIndexModule, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SHClus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
